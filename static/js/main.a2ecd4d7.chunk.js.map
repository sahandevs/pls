{"version":3,"sources":["data/DB.ts","Utils.tsx","ExchangePage.tsx","SetupCurrencies.tsx","SetupExchangeRates.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DBContext","React","createContext","useDBContext","result","useContext","Error","Database","currencies","BehaviorSubject","exchangeRates","bank","this","pipe","skip","subscribe","next","save","currency","newValue","value","find","x","name","Object","assign","push","map","bankOf","v","Math","max","exchangeRate","canExchange","take","newBank","from","to","rate","filter","JSON","parse","localStorage","getItem","setItem","stringify","useObservable","obs","defaultValue","useState","setValue","useEffect","sub","unsubscribe","ExchangeButton","onDone","db","MenuItem","disabled","onClick","exchange","unit","ExchangeItem","getExchangeRates","currentValue","anchorEl","setAnchorEl","handleClose","Card","variant","Box","padding","display","flexDirection","Typography","Button","event","currentTarget","aria-controls","aria-haspopup","Menu","id","keepMounted","open","onClose","item","key","addToBank","SpendItem","canSpend1","canSpend","length","ExchangePage","getCurrencies","alignItems","flexWrap","isSource","Divider","CurrencyItem","isNew","setName","icon","setIcon","description","setDescription","setIsSource","isTime","setIsTime","setUnit","isEdited","margin","justifyContent","Icon","TextField","label","onChange","e","target","Checkbox","checked","addOrUpdateCurrency","removeCurrency","SetupCurrencies","i","Item","setFrom","setTo","toString","rateValue","setRateValue","Number","isValid","isNaN","FormControl","InputLabel","Select","labelId","d","marginX","inputMode","addOrUpdateExchangeRate","removeExchangeRate","SetupExchangeRates","rates","App","page","setPage","useMemo","load","CreateOrGetDefaultDatabase","Provider","CssBaseline","paddingTop","marginTop","flex","minWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2ecd4d7.chunk.js","sourcesContent":["import { Observable, BehaviorSubject } from \"rxjs\";\nimport { map, take, skip } from \"rxjs/operators\";\nimport React from \"react\";\n\nexport const DBContext = React.createContext<Database | null>(null);\n\nexport function useDBContext(): Database {\n  const result = React.useContext(DBContext);\n  if (result == null)\n    throw new Error(\"useDBContext used outside of the context\");\n  return result;\n}\nexport type Currency = {\n  name: string;\n  unit: string;\n  isTime: boolean;\n  isSource: boolean;\n  icon: string;\n  description: string;\n};\n\nexport type ExchangeRate = {\n  from: Currency;\n  to: Currency;\n  rate: number;\n};\n\nexport type Bank = { [key: string]: number };\n\nexport class Database {\n  constructor() {\n    this.currencies.pipe(skip(1)).subscribe({ next: () => this.save() });\n    this.exchangeRates.pipe(skip(1)).subscribe({ next: () => this.save() });\n    this.bank.pipe(skip(1)).subscribe({ next: () => this.save() });\n  }\n\n  private currencies = new BehaviorSubject<Currency[]>([]);\n  private exchangeRates = new BehaviorSubject<ExchangeRate[]>([]);\n  private bank = new BehaviorSubject<Bank>({});\n\n  addOrUpdateCurrency(currency: Currency) {\n    const newValue = [...this.currencies.value];\n    const result = newValue.find((x) => x.name === currency.name);\n    if (result != null) {\n      Object.assign(result, currency);\n    } else {\n      newValue.push(currency);\n    }\n    this.currencies.next(newValue);\n  }\n\n  bankOf(currency: Currency): Observable<number> {\n    return this.bank.pipe(\n      map((bank) => {\n        return bank[currency.name] ?? 0;\n      })\n    );\n  }\n\n  canSpend(currency: Currency, value: number): Observable<boolean> {\n    return this.bankOf(currency).pipe(map((v) => v - value >= 0));\n  }\n\n  addToBank(currency: Currency, value: number) {\n    this.bank.next({\n      ...this.bank.value,\n      [currency.name]: Math.max(\n        0,\n        (this.bank.value[currency.name] ?? 0) + value\n      ),\n    });\n  }\n\n  exchange(exchangeRate: ExchangeRate, value: number) {\n    this.canExchange(exchangeRate, value)\n      .pipe(take(1))\n      .subscribe({\n        next: (canExchange) => {\n          if (canExchange) {\n            const newBank = { ...this.bank.value };\n            if (newBank[exchangeRate.from.name] == null) {\n              newBank[exchangeRate.from.name] = 0;\n            }\n            newBank[exchangeRate.from.name] -= value;\n            if (newBank[exchangeRate.to.name] == null) {\n              newBank[exchangeRate.to.name] = 0;\n            }\n            newBank[exchangeRate.to.name] += value * exchangeRate.rate;\n            this.bank.next(newBank);\n          }\n        },\n      });\n  }\n\n  canExchange(exchangeRate: ExchangeRate, value: number): Observable<boolean> {\n    return this.bankOf(exchangeRate.from).pipe(map((v) => v >= value));\n  }\n\n  removeCurrency(currency: Currency) {\n    this.currencies.next(\n      this.currencies.value.filter((x) => x.name !== currency.name)\n    );\n  }\n\n  addOrUpdateExchangeRate(rate: ExchangeRate) {\n    const newValue = [...this.exchangeRates.value];\n    const result = newValue.find(\n      (x) => x.from.name === rate.from.name && x.to.name === rate.to.name\n    );\n    if (result != null) {\n      Object.assign(result, rate);\n    } else {\n      newValue.push(rate);\n    }\n    this.exchangeRates.next(newValue);\n  }\n\n  removeExchangeRate(rate: ExchangeRate) {\n    this.exchangeRates.next(\n      this.exchangeRates.value.filter(\n        (x) => x.from.name === rate.from.name && x.to.name === rate.to.name\n      )\n    );\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.currencies;\n  }\n\n  getExchangeRates(): Observable<ExchangeRate[]> {\n    return this.exchangeRates;\n  }\n\n  load() {\n    const result = JSON.parse(localStorage.getItem(\"DATA\") ?? \"{}\");\n    this.currencies.next(result[\"currencies\"] ?? []);\n    this.exchangeRates.next(result[\"exchangeRates\"] ?? []);\n    this.bank.next(result[\"bank\"] ?? {});\n  }\n\n  save() {\n    const result = {\n      currencies: this.currencies.value,\n      exchangeRates: this.exchangeRates.value,\n      bank: this.bank.value,\n    };\n    localStorage.setItem(\"DATA\", JSON.stringify(result));\n  }\n}\n\nexport function CreateOrGetDefaultDatabase(): Database {\n  const db = new Database();\n  db.load();\n  return db;\n}\n","import { Observable } from \"rxjs\";\nimport React from \"react\";\nexport function useObservable<T>(\n  obs: Observable<T> | (() => Observable<T>),\n  defaultValue: T\n): T {\n  const [value, setValue] = React.useState(defaultValue);\n  React.useEffect(() => {\n    const _obs = typeof obs === \"function\" ? obs() : obs;\n    const sub = _obs.subscribe({\n      next: (v) => {\n        setValue(v);\n      },\n    });\n    return () => sub.unsubscribe();\n  }, [obs]);\n\n  return value;\n}\n","import React from \"react\";\nimport {\n  Box,\n  Typography,\n  Divider,\n  Button,\n  Card,\n  MenuItem,\n  Menu,\n} from \"@material-ui/core\";\nimport { useDBContext, Currency, ExchangeRate } from \"./data/DB\";\nimport { useObservable } from \"./Utils\";\n\nfunction ExchangeButton({\n  exchangeRate,\n  value,\n  onDone,\n}: {\n  exchangeRate: ExchangeRate;\n  value: number;\n  onDone: () => void;\n}) {\n  const db = useDBContext();\n  const canExchange = useObservable(db.canExchange(exchangeRate, value), false);\n  return (\n    <MenuItem\n      disabled={!canExchange}\n      onClick={() => {\n        db.exchange(exchangeRate, value);\n        onDone();\n      }}\n    >{`1 ${exchangeRate.from.unit} of ${exchangeRate.from.name} to ${\n      value * exchangeRate.rate\n    } ${exchangeRate.to.unit} of ${exchangeRate.to.name}`}</MenuItem>\n  );\n}\n\nfunction ExchangeItem({ currency }: { currency: Currency }) {\n  const db = useDBContext();\n  const exchangeRates = useObservable(db.getExchangeRates(), []);\n  const currentValue = useObservable(db.bankOf(currency), 0);\n  const [anchorEl, setAnchorEl] = React.useState<Element | null>(null);\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <Card variant={\"outlined\"}>\n      <Box padding={2} display={\"flex\"} flexDirection={\"column\"}>\n        <Typography>{`${currentValue} ${currency.unit} of ${currency.name}`}</Typography>\n        <Button\n          onClick={(event) => setAnchorEl(event.currentTarget)}\n          aria-controls=\"menu\"\n          aria-haspopup=\"true\"\n        >\n          {\"Exchange\"}\n        </Button>\n        <Menu\n          id=\"menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={anchorEl != null}\n          onClose={handleClose}\n        >\n          {exchangeRates\n            .filter((x) => x.from.name === currency.name)\n            .map((item) => (\n              <ExchangeButton\n                key={item.from.name + \"_\" + item.to.name}\n                exchangeRate={item}\n                value={1}\n                onDone={handleClose}\n              />\n            ))}\n        </Menu>\n        <Box display={\"flex\"} flexDirection={\"row\"}>\n          <Button onClick={(event) => db.addToBank(currency, 1)}>{\"+1\"}</Button>\n          <Button onClick={(event) => db.addToBank(currency, -1)}>\n            {\"-1\"}\n          </Button>\n        </Box>\n      </Box>\n    </Card>\n  );\n}\n\nfunction SpendItem({ currency }: { currency: Currency }) {\n  const db = useDBContext();\n  const currentValue = useObservable(db.bankOf(currency), 0);\n  const canSpend1 = useObservable(db.canSpend(currency, 1), false);\n  const exchangeRates = useObservable(db.getExchangeRates(), []).filter(\n    (x) => x.from.name === currency.name\n  );\n  const [anchorEl, setAnchorEl] = React.useState<Element | null>(null);\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  return (\n    <Card variant={\"outlined\"}>\n      <Box padding={2} display={\"flex\"} flexDirection={\"column\"}>\n        <Typography>{`${currentValue} ${currency.unit} of ${currency.name}`}</Typography>\n        {exchangeRates.length > 0 && (\n          <>\n            <Button\n              onClick={(event) => setAnchorEl(event.currentTarget)}\n              aria-controls=\"menu\"\n              aria-haspopup=\"true\"\n            >\n              {\"Exchange\"}\n            </Button>\n            <Menu\n              id=\"menu\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={anchorEl != null}\n              onClose={handleClose}\n            >\n              {exchangeRates\n                .filter((x) => x.from.name === currency.name)\n                .map((item) => (\n                  <ExchangeButton\n                    key={item.from.name + \"_\" + item.to.name}\n                    exchangeRate={item}\n                    value={1}\n                    onDone={handleClose}\n                  />\n                ))}\n            </Menu>\n          </>\n        )}\n        <Button\n          disabled={!canSpend1}\n          onClick={() => db.addToBank(currency, -1)}\n        >{`Spend 1 ${currency.unit}`}</Button>\n      </Box>\n    </Card>\n  );\n}\n\nexport function ExchangePage() {\n  const db = useDBContext();\n  const currencies = useObservable(db.getCurrencies(), []);\n\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"} alignItems={\"center\"}>\n      <Typography variant={\"h5\"}>{\"Exchange\"}</Typography>\n      <Box display={\"flex\"} flexWrap={\"wrap\"} flexDirection={\"row\"}>\n        {currencies\n          .filter((x) => x.isSource)\n          .map((currency) => (\n            <ExchangeItem key={currency.name} currency={currency} />\n          ))}\n      </Box>\n      <Divider variant={\"middle\"} />\n      <Typography variant={\"h5\"}>{\"Spend\"}</Typography>\n      <Box display={\"flex\"} flexWrap={\"wrap\"} flexDirection={\"row\"}>\n        {currencies\n          .filter((x) => !x.isSource)\n          .map((currency) => (\n            <SpendItem key={currency.name} currency={currency} />\n          ))}\n      </Box>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Currency, useDBContext } from \"./data/DB\";\nimport { useObservable } from \"./Utils\";\nimport {\n  Box,\n  Icon,\n  Checkbox,\n  Button,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\n\nfunction CurrencyItem({\n  currency,\n  isNew,\n}: {\n  currency: Currency;\n  isNew: boolean;\n}) {\n  const db = useDBContext();\n  const [name, setName] = React.useState(() => currency.name);\n  const [icon, setIcon] = React.useState(() => currency.icon);\n  const [description, setDescription] = React.useState(\n    () => currency.description\n  );\n  const [isSource, setIsSource] = React.useState(() => currency.isSource);\n  const [isTime, setIsTime] = React.useState(() => currency.isTime);\n  const [unit, setUnit] = React.useState(() => currency.unit);\n\n  const isEdited =\n    name !== currency.name ||\n    icon !== currency.icon ||\n    description !== currency.description ||\n    isTime !== currency.isTime ||\n    unit !== currency.unit ||\n    isSource !== currency.isSource;\n\n  return (\n    <Box\n      display={\"flex\"}\n      flexDirection={\"row\"}\n      alignItems={\"center\"}\n      margin={1}\n      justifyContent={\"space-between\"}\n    >\n      {!isNew && <Icon>{currency.icon}</Icon>}\n      {isNew && (\n        <TextField\n          label={\"Icon\"}\n          value={icon}\n          onChange={(e) => setIcon(e.target.value)}\n        />\n      )}\n      <TextField\n        label={\"Name\"}\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <TextField\n        label={\"Description\"}\n        value={description}\n        onChange={(e) => setDescription(e.target.value)}\n      />\n      <TextField\n        label={\"Unit\"}\n        value={unit}\n        onChange={(e) => setUnit(e.target.value)}\n      />\n\n      <Checkbox checked={isTime} onChange={(e, v) => setIsTime(v)} />\n      <Typography>{\"Is time\"}</Typography>\n      <Checkbox checked={isSource} onChange={(e, v) => setIsSource(v)} />\n      <Typography>{\"Is source\"}</Typography>\n      {isEdited && (\n        <Button\n          onClick={() => {\n            db.addOrUpdateCurrency({\n              name,\n              icon,\n              description,\n              isTime,\n              unit,\n              isSource,\n            });\n          }}\n        >\n          <Icon>{\"save\"}</Icon>\n        </Button>\n      )}\n\n      {!isNew && (\n        <Button\n          onClick={() => {\n            db.removeCurrency(currency);\n          }}\n        >\n          <Icon>{\"delete\"}</Icon>\n        </Button>\n      )}\n    </Box>\n  );\n}\n\nexport function SetupCurrencies() {\n  const db = useDBContext();\n  const currencies = useObservable(db.getCurrencies(), []);\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"}>\n      {currencies.map((currency, i) => (\n        <CurrencyItem key={currency.name} currency={currency} isNew={false} />\n      ))}\n      <CurrencyItem\n        key={`new_currency_item_${currencies.length}`}\n        currency={{\n          name: `New currency ${currencies.length + 1}`,\n          description: \"\",\n          icon: \"\",\n          isSource: false,\n          isTime: false,\n          unit: \"hour\",\n        }}\n        isNew={true}\n      />\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { ExchangeRate, useDBContext } from \"./data/DB\";\nimport { useObservable } from \"./Utils\";\nimport {\n  Box,\n  Icon,\n  Button,\n  TextField,\n  Typography,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\n\nfunction Item({ rate, isNew }: { rate?: ExchangeRate; isNew: boolean }) {\n  const db = useDBContext();\n  const currencies = useObservable(db.getCurrencies(), []);\n  const [from, setFrom] = React.useState(() => rate?.from);\n  const [to, setTo] = React.useState(() => rate?.to);\n  const [rateValue, setRateValue] = React.useState(\n    () => rate?.rate.toString() ?? \"\"\n  );\n\n  const isEdited =\n    from?.name !== rate?.from.name ||\n    to?.name !== rate?.to.name ||\n    Number(rateValue) !== rate?.rate;\n  const isValid =\n    !isNaN(Number(rateValue)) &&\n    from != null &&\n    to != null &&\n    Number(rateValue) > 0;\n\n  return (\n    <Box\n      display={\"flex\"}\n      flexDirection={\"row\"}\n      alignItems={\"center\"}\n      margin={1}\n      justifyContent={\"space-between\"}\n    >\n      <Box display={\"flex\"} flexDirection={\"row\"}>\n        <FormControl>\n          <InputLabel id=\"from-label-id\">{\"From\"}</InputLabel>\n          <Select\n            labelId=\"from-label-id\"\n            value={from?.name}\n            onChange={(e: any, d: any) =>\n              setFrom(currencies.find((x) => x.name === e.target.value))\n            }\n          >\n            <MenuItem>{\"-\"}</MenuItem>\n            {currencies\n              .filter((x) => x.name !== to?.name)\n              .map((currency, i) => (\n                <MenuItem key={currency.name + \"_from\"} value={currency.name}>\n                  {currency.name}\n                </MenuItem>\n              ))}\n          </Select>\n        </FormControl>\n        <Box marginX={1} />\n        <TextField\n          value={rateValue}\n          inputMode={\"decimal\"}\n          onChange={(e) => setRateValue(e.target.value)}\n          label={\"Rate\"}\n        />\n        <Box marginX={1} />\n        <FormControl>\n          <InputLabel id=\"to-label-id\">{\"To\"}</InputLabel>\n          <Select\n            labelId=\"to-label-id\"\n            value={to?.name}\n            onChange={(e: any, d: any) =>\n              setTo(currencies.find((x) => x.name === e.target.value))\n            }\n          >\n            <MenuItem>{\"-\"}</MenuItem>\n            {currencies\n              .filter((x) => x.name !== from?.name)\n              .map((currency, i) => (\n                <MenuItem key={currency.name + \"_to\"} value={currency.name}>\n                  {currency.name}\n                </MenuItem>\n              ))}\n          </Select>\n        </FormControl>\n      </Box>\n      {isValid && (\n        <Typography>{`1 ${from?.unit} of ${from?.name} = ${Number(rateValue)} ${\n          to?.unit\n        } of ${to?.name}`}</Typography>\n      )}\n\n      <Box display={\"flex\"} flexDirection={\"row\"}>\n        {isEdited && isValid && (\n          <Button\n            onClick={() => {\n              if (from == null || to == null) return;\n              db.addOrUpdateExchangeRate({\n                from: from,\n                to: to,\n                rate: Number(rateValue),\n              });\n            }}\n          >\n            <Icon>{\"save\"}</Icon>\n          </Button>\n        )}\n\n        {!isNew && rate != null && (\n          <Button\n            onClick={() => {\n              db.removeExchangeRate(rate);\n            }}\n          >\n            <Icon>{\"delete\"}</Icon>\n          </Button>\n        )}\n      </Box>\n    </Box>\n  );\n}\n\nexport function SetupExchangeRates() {\n  const db = useDBContext();\n  const rates = useObservable(db.getExchangeRates(), []);\n  return (\n    <Box display={\"flex\"} flexDirection={\"column\"}>\n      {rates.map((rate, i) => (\n        <Item\n          key={rate.from.name + \"_\" + rate.to.name + \"_\" + rate.rate}\n          rate={rate}\n          isNew={false}\n        />\n      ))}\n      <Item key={rates.length} isNew={true} />\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { CssBaseline, Box, Button, Card } from \"@material-ui/core\";\nimport { ExchangePage } from \"./ExchangePage\";\nimport { SetupCurrencies } from \"./SetupCurrencies\";\nimport { SetupExchangeRates } from \"./SetupExchangeRates\";\nimport { DBContext, CreateOrGetDefaultDatabase } from \"./data/DB\";\n\ntype Page = \"exchange\" | \"setup-currencies\" | \"setup-exhange-rates\";\n\nfunction App() {\n  const [page, setPage] = React.useState<Page>(\"exchange\");\n  const db = React.useMemo(() => CreateOrGetDefaultDatabase(), []);\n  return (\n    <DBContext.Provider value={db}>\n      <CssBaseline />\n      <Box\n        display={\"flex\"}\n        flexDirection={\"column\"}\n        paddingTop={3}\n        alignItems={\"center\"}\n      >\n        <Box display={\"flex\"} flexDirection={\"row\"}>\n          <Button\n            variant={page === \"setup-currencies\" ? \"outlined\" : \"text\"}\n            onClick={() => setPage(\"setup-currencies\")}\n          >\n            {\"Setup Currencies\"}\n          </Button>\n          <Button\n            variant={page === \"exchange\" ? \"outlined\" : \"text\"}\n            onClick={() => setPage(\"exchange\")}\n          >\n            {\"Exchange\"}\n          </Button>\n          <Button\n            variant={page === \"setup-exhange-rates\" ? \"outlined\" : \"text\"}\n            onClick={() => setPage(\"setup-exhange-rates\")}\n          >\n            {\"Setup Exchange Rates\"}\n          </Button>\n        </Box>\n        <Box marginTop={5} flex={1} minWidth={\"75%\"}>\n          <Card>\n            {page === \"exchange\" && <ExchangePage />}\n            {page === \"setup-currencies\" && <SetupCurrencies />}\n            {page === \"setup-exhange-rates\" && <SetupExchangeRates />}\n          </Card>\n        </Box>\n      </Box>\n    </DBContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}